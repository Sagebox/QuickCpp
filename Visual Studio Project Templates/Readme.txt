-----------------
Project Templates
-----------------

Note: The default template for basic use is "Console Mode (and Windows)", which provides a standard C++ 
template for Console Mode (main()) and Pure Windows (WinMain()) applications.

The project templates contained in the directory "Visual Studio Project Templates" contain Visual Studio C++ templates
to create programs using Sagebox Quick C++ with paths and libraries set up for you.

There are two ways to make sure the projects will work correctly:

    1. Put your project in the path structure relative to Sagebox Quick C++ include and lib directories, as outlined below.
    2. Set the SageboxRoot Macro in the properties page to the SageboxQuick C++  root (where the Sagebox Quick C++ lib and
       include directories reside).

Note: see a description of included projects below.

--> Directory Paths in the Project Templates

    The default template structure is to look for Sagebox Quick C++ include, lib, and (optionally) Widget directories in 
    the same root as your top-level Visual Studio projects directory.
    
    For example, with a project or solution named "New Project",  the directory structure is as follows:

               include                 (Sagebox Quick C++ include directory)
               lib                     (SageboxQuick C++  lib directory)
               Widgets                 (Sagebox Quick C++ Widgets directory)
               My Projects             (Your project or solution top directory)
                   └───New Project     (Location of solution  (.sln) or project (.vcxproj)

    In this example, your project (or solution) file is located at "My Projects\New Project".
    The Sagebox Quick C++ directory "My Projects" is provided as a directory that will work with the provided templates, 
    where you can create individual project directories that use Sagebox.

--> SageboxRoot Macro

    The best way to tell the project how to locate the Sagebox Quick C++ directories is to set the properties macro
    "SageboxRoot" to the location of the Sagebox directories.  
    
    For example, if the path to the Sagebox location is "c:\Code\Sagebox\QuickCpp\git", set SageboxRoot to the
    same value, "c:\code\sagebox\QuickCpp\git". 

    --> Editing The SageboxRoot macro

        The project templates provide a property file.  Do not Edit this file.  Instead, do the following:

            1. Open View->Other Windows->Property Manager

        Once the Property Manager appears:

            1. Click on the project
            2. Click on one of the project settings, i.e. Debug, Debug Optmized, etc.
            3. Double-Click on "PropertySheet"
               This will bring up the "PropertySheet Property Pages"
            4. Click on "User Macros" in the left panel
            5. Double Click on "SageboxRoot" and set the path to the Sagebox Quick C++ directory.

        When finished, the program will now compile with the project template.  The Property Sheet won't
        be saved until the Solution/Project is closed, and Microsoft Visual Studio may ask if you want to
        save it (click "yes"). 

-----------------
Included Projects
-----------------

There are two main projects included, and two Sandbox Projects (labeled as Experimental)

--> Console Mode (and Windows) Project

    This creates a standard C++ main() program and includes the code to create the main Sagebox Quick C++
    environment, with the global "win." window and other utilities
    
    This runs in Console Mode, and it can be switched to Windows via a project setting.
    
    --> Windows Project Setting
    
        The Windows project setting turns the program into a pure Windows program without a console mode.  
        The WinMain() is provided in the WinMain.lib, which translates the input and then calls your main().

        No code needs to be changed to change from Console to Windows and vice-versa.  This provides a nice
        way to start in Console Mode with the Console Window for debug, etc., and then switch to Windows.  

        This project setting also points out that the only difference between a Console Mode program and
        Windows program is the Console Window and really nothing else. 
        
        You can use the Windows Project (described below) to use a WinMain() start, or simply remove WinMain.lib
        from this project and use your own WinMain().

--> Windows Project

    The Windows project template is a Pure Windows program with no Console Mode.  This is a canonical Windows
    program starting at WinMain(). 

    The template creates the Sagebox Quick C++ environment (i.e. global "win" wond0w as well as the CSagebox
    object used by the Sagebox Quick C++ environment.

    This program can work as a pure event-driven program, a procedural program, or a mix.

    Once Sagebox is initialized, WinMain() can be used procedurally, just like a Console Mode program, but can 
    also work with Windows events.

    In Windows, there is no real difference between a Console Mode program and Windows program, as a Console Mode
    program is simply a Windows program that starts a thread and calls a function to launch the Console Mode Window process.  

    The Windows project is provided to show that Sagebox Quick C++ can work with regular, canonical Windows programs, as well
    as Console Mode, or a mixture. 

    As with a Console Mode project, you can use StopThread() in Sagebox to go pure event, driven.  
    See the documentation on StopThread() for more information

--> Sandbox Project

    The Sandbox projects are projects that start with the Sagebox Quick C++ environment already created, and peform a
    number of other functions.  They are meant to help learning and beginning programming, making it easier to start programming.

    The Sandbox projects are also used for to show smaller examples, to remove the startup and any exit code that can 
    obscure the example.

    Sandbox Projects provide the following additions to a regular C++ program using the Sagebox Quick C++ libraries:

        1. Starts up Sagebox Quick C++ automatically, allowing immediate start from main()
        2. Adds an Exit Button at the end of the program so that no exit code is needed for programs that exit
           without pausing. This can be disabled by calling NoExitMsg()
        3. Creates the Process Control Window as visible to make sure the program can be ended easilym even if it isn't showing.
        4. Turns on the ability for Control-C to exit the program at any point. (This is currently the default for all Sagebox 
           Quick C++ programs, but may change in the future. (this can be enabled or disabled easily).
        5. There are plans to add more in the future, such as more control and help with exceptions, and additions to the 
           Process Control Window.  

--> Windows Sandbox Project

    The main Sandbox project is the "Sandbox" project.  This combines stdio and Window functions into the main Sagebox window.
    It does not have a console window.

    This allows cin, cout, printf, etc., just as in Standard C++, but in the main Sagebox window, but with more controlled
    and advanced I/O, avoiding some problems with stdio in the Console Window.
    
    --> Example of Sandbox Program

        This is an entire Sandbox program, which looks just like a regular main() program, but with the Sagebox Quick C++ 
        environment set up before entering main().

            #include "CQuickCpp.h"
            int main()
            {
              SetFont(100);
               win.printf("Hello World");
            }
        There is also no exit code.  At the end, an exit button (in Windows mode) or console-based text message will be
        printed which will then look for the user's input, so the program doesn't just disappear (you can call NoExitMsg()
        to disable this).

        This means short, quick-and-easy programs using Sagebox where much is taken care of automatically, with an easy way to exit
        the program by pressing control-C or "Terminate Program" in the Process Window.




